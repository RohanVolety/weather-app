pipeline:
  name: FLASKCICD
  identifier: FLASKCICD
  projectIdentifier: Flaskpipeline
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: build test run
        identifier: build_test_run
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: code compile
                  identifier: code_compile
                  spec:
                    connectorRef: docker_quickstart
                    image: python:3.9.0-alpine3.12
                    shell: Sh
                    command: python -m compileall ./
              - step:
                  type: Run
                  name: create Docker file
                  identifier: create_Docker_file
                  spec:
                    connectorRef: docker_quickstart
                    image: alpine
                    shell: Sh
                    command: |-
                      touch pythondockerfile
                      cat > pythondockerfile <<- EOM
                      FROM python:3.9.7-alpine
                      WORKDIR /weather-app
                      ADD . /weather-app
                      RUN pip install -r requirements.txt
                      CMD ["python" , "app.py"]
                      EOM
                      cat pythondockerfile
              - step:
                  type: BuildAndPushDockerRegistry
                  name: Build and Push an image to Docker Registry
                  identifier: BuildandPushanimagetoDockerRegistry
                  spec:
                    connectorRef: docker_quickstart
                    repo: rohan010/weather-app
                    tags:
                      - latest
                    dockerfile: pythondockerfile
    - stage:
        name: integration test
        identifier: integration_test
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          execution:
            steps:
              - step:
                  type: Background
                  name: python server
                  identifier: python_server
                  spec:
                    connectorRef: docker_quickstart
                    image: tiangolo/uwsgi-nginx-flask:python3.9
                    shell: Sh
                    command: python app.py
                  description: server connection
              - step:
                  type: Run
                  name: test connection to server
                  identifier: test_connection_to_server
                  spec:
                    connectorRef: docker_quickstart
                    image: curlimages/curl:7.73.0
                    shell: Sh
                    command: |-
                      sleep 10
                      curl python_server:5000
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
    - stage:
      - stage:
        name: k8deploy
        identifier: k8deploy
        description: ""        
        type: Deployment
        spec:
          serviceConfig:
            serviceRef: flaskapp
            serviceDefinition:
              spec:
                variables: []
                manifests:
                  - manifest:
                      identifier: manifest
                      type: K8sManifest
                      spec:
                        store:
                          type: Github
                          spec:
                            connectorRef: pythonsampleconnector
                            gitFetchType: Branch
                            paths:
                              - default-k8s-manifests/Manifests/Files/templates
                            branch: main
                        skipResourceVersioning: false
                  - manifest:
                      identifier: values
                      type: Values
                      spec:
                        store:
                          type: Github
                          spec:
                            connectorRef: pythonsampleconnector
                            gitFetchType: Branch
                            paths:
                              - default-k8s-manifests/Manifests/Files/ng_values_dockercfg.yaml
                            branch: main
                artifacts:
                  primary:
                    spec:
                      connectorRef: docker_quickstart
                      imagePath: rohan010/weather-app
                      tag: <+input>
                    type: DockerRegistry
              type: Kubernetes
          infrastructure:
            environmentRef: deployenv
            infrastructureDefinition:
              type: KubernetesDirect
              spec:
                connectorRef: kubernetesinfra
                namespace: default
                releaseName: release-<+INFRA_KEY>
            allowSimultaneousDeployments: false
          execution:
            steps:
              - step:
                  name: Rollout Deployment
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec: {}
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
  properties:
    ci:
      codebase:
        connectorRef: pythonsampleconnector
        build: <+input>
